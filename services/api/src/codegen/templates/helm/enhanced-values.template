# Enhanced values for {{projectName}}
# Generated by AI API Integrator

replicaCount: 2

image:
  repository: {{projectName}}
  pullPolicy: IfNotPresent
  tag: "latest"

service:
  type: ClusterIP
  port: {{port}}
  annotations: {}

ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: {{projectName}}.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: {{projectName}}-tls
      hosts:
        - {{projectName}}.yourdomain.com

config:
  environment: production
  logLevel: info
  apiBaseUrl: ""
  jwt:
    secret: "your-jwt-secret-change-this-in-production"
  apiKeys: []
    # - name: "API_KEY_1"
    #   value: "your-api-key-1"
    # - name: "API_KEY_2"
    #   value: "your-api-key-2"

# PostgreSQL configuration
postgres:
  enabled: true
  postgresqlUsername: {{projectName}}
  postgresqlPassword: "change-this-password"
  postgresqlDatabase: {{projectName}}
  postgresqlHost: "{{projectName}}-postgresql"
  service:
    ports:
      postgresql: 5432

# Redis configuration
redis:
  enabled: true
  host: "{{projectName}}-redis-master"
  port: 6379
  password: ""

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Node selector, tolerations, and affinity
nodeSelector: {}
tolerations: []
affinity: {}

# Pod security context
podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
      - ALL

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: {{port}}
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: {{port}}
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Environment variables
extraEnvVars: []
  # - name: EXTRA_VAR
  #   value: "extra-value"

# ConfigMaps and Secrets
extraConfigmaps: []
extraSecrets: []

# Additional volumes
extraVolumes: []
extraVolumeMounts: []

# Service monitoring
serviceMonitor:
  enabled: true
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s
  labels:
    release: prometheus

# Network policies
networkPolicy:
  enabled: true
  allowedIngressPods: []
  allowedEgressPods: []
