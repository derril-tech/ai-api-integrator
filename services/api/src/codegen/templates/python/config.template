"""
Configuration for {{entityName}} API Client
"""

import os
from typing import Optional


class {{entityName}}Config:
    """
    Configuration class for {{entityName}} API client.

    Provides default values and environment variable support.
    """

    def __init__(
        self,
        api_key: Optional[str] = None,
        base_url: Optional[str] = None,
        timeout: float = 30.0,
        max_retries: int = 3,
        retry_delay: float = 1.0,
        retry_backoff: float = 2.0,
        version: str = "1.0.0",
    ):
        """
        Initialize configuration.

        Args:
            api_key: API key for authentication
            base_url: Base URL for the API
            timeout: Request timeout in seconds
            max_retries: Maximum number of retries for failed requests
            retry_delay: Initial delay between retries
            retry_backoff: Backoff multiplier for retry delays
            version: Client version
        """
        self.api_key = api_key or os.getenv('{{entityName | upper}}_API_KEY')
        self.base_url = base_url or os.getenv(
            '{{entityName | upper}}_BASE_URL',
            'https://api.{{entityName | lower}}.com/v1'
        )
        self.timeout = timeout
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.retry_backoff = retry_backoff
        self.version = version

    def validate(self) -> None:
        """
        Validate configuration.

        Raises:
            ValueError: If configuration is invalid
        """
        if not self.api_key:
            raise ValueError("API key is required (set {{entityName | upper}}_API_KEY environment variable or pass api_key parameter)")

        if not self.base_url:
            raise ValueError("Base URL is required")

        if self.timeout <= 0:
            raise ValueError("Timeout must be positive")

        if self.max_retries < 0:
            raise ValueError("Max retries cannot be negative")

        if self.retry_delay <= 0:
            raise ValueError("Retry delay must be positive")

        if self.retry_backoff <= 1:
            raise ValueError("Retry backoff must be greater than 1")
