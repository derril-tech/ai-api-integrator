"""
Exceptions for {{entityName}} API Client
"""


class {{entityName}}Error(Exception):
    """
    Base exception for {{entityName}} API errors.

    All {{entityName}} API client exceptions inherit from this class.
    """

    def __init__(self, message: str, status_code: int = None, response_data: dict = None):
        """
        Initialize exception.

        Args:
            message: Error message
            status_code: HTTP status code (if applicable)
            response_data: Raw response data from API
        """
        super().__init__(message)
        self.message = message
        self.status_code = status_code
        self.response_data = response_data or {}

    def __str__(self):
        if self.status_code:
            return f"{{entityName}}Error (status {self.status_code}): {self.message}"
        return f"{{entityName}}Error: {self.message}"


class {{entityName}}AuthError({{entityName}}Error):
    """
    Exception raised for authentication errors (401).
    """

    def __init__(self, message: str = "Authentication failed"):
        super().__init__(message, 401)


class {{entityName}}RateLimitError({{entityName}}Error):
    """
    Exception raised for rate limit errors (429).
    """

    def __init__(self, message: str = "Rate limit exceeded", retry_after: str = None):
        super().__init__(message, 429)
        self.retry_after = retry_after

    def __str__(self):
        if self.retry_after:
            return f"{{entityName}}RateLimitError: {self.message} (retry after {self.retry_after}s)"
        return f"{{entityName}}RateLimitError: {self.message}"


class {{entityName}}NotFoundError({{entityName}}Error):
    """
    Exception raised for not found errors (404).
    """

    def __init__(self, message: str = "Resource not found"):
        super().__init__(message, 404)


class {{entityName}}ValidationError({{entityName}}Error):
    """
    Exception raised for validation errors (400).
    """

    def __init__(self, message: str = "Validation failed", validation_errors: list = None):
        super().__init__(message, 400)
        self.validation_errors = validation_errors or []

    def __str__(self):
        base_msg = super().__str__()
        if self.validation_errors:
            errors_str = "\n".join(f"  - {error}" for error in self.validation_errors)
            return f"{base_msg}\nValidation errors:\n{errors_str}"
        return base_msg


class {{entityName}}ServerError({{entityName}}Error):
    """
    Exception raised for server errors (5xx).
    """

    def __init__(self, message: str = "Internal server error", status_code: int = 500):
        super().__init__(message, status_code)


class {{entityName}}ConfigurationError({{entityName}}Error):
    """
    Exception raised for configuration errors.
    """

    def __init__(self, message: str):
        super().__init__(message, None)


class {{entityName}}NetworkError({{entityName}}Error):
    """
    Exception raised for network-related errors.
    """

    def __init__(self, message: str, original_error: Exception = None):
        super().__init__(message, None)
        self.original_error = original_error

    def __str__(self):
        base_msg = super().__str__()
        if self.original_error:
            return f"{base_msg}\nCaused by: {self.original_error}"
        return base_msg


# Error code mappings for common API errors
ERROR_CODE_MAP = {
    'invalid_request': {{entityName}}ValidationError,
    'unauthorized': {{entityName}}AuthError,
    'forbidden': {{entityName}}AuthError,
    'not_found': {{entityName}}NotFoundError,
    'rate_limited': {{entityName}}RateLimitError,
    'server_error': {{entityName}}ServerError,
}


def create_error_from_response(response_data: dict, status_code: int) -> {{entityName}}Error:
    """
    Create an appropriate exception from API response data.

    Args:
        response_data: Response data from API
        status_code: HTTP status code

    Returns:
        Appropriate {{entityName}}Error subclass
    """
    error_code = response_data.get('error', {}).get('code')
    error_message = response_data.get('error', {}).get('message') or response_data.get('message', 'Unknown error')

    # Map HTTP status codes
    if status_code == 400:
        return {{entityName}}ValidationError(error_message, response_data.get('errors'))
    elif status_code == 401:
        return {{entityName}}AuthError(error_message)
    elif status_code == 403:
        return {{entityName}}AuthError(error_message)
    elif status_code == 404:
        return {{entityName}}NotFoundError(error_message)
    elif status_code == 429:
        retry_after = response_data.get('error', {}).get('retry_after')
        return {{entityName}}RateLimitError(error_message, retry_after)
    elif status_code >= 500:
        return {{entityName}}ServerError(error_message, status_code)

    # Map error codes
    error_class = ERROR_CODE_MAP.get(error_code, {{entityName}}Error)
    return error_class(error_message)
