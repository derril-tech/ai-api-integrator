// {{entityName}} API SDK
// Generated by AI API Integrator

export { {{entityName}}Client } from './client';
export type {
  {{entityName}}ClientConfig,
  RequestOptions,
  PaginationOptions,
  PaginationResponse,
} from './client';

// Export all types
export type {
  {{entityName}},
  Create{{entityName}}Request,
  Update{{entityName}}Request,
  {{entityName}}ListResponse,
  ApiResponse,
  ErrorResponse,
  QueryOptions,
  {{#if webhooks}}
  WebhookEvent,
  {{/if}}
  RateLimitHeaders,
} from './types';

// Export error classes
export {
  ApiError,
  ValidationError,
  AuthenticationError,
  AuthorizationError,
  NotFoundError,
  RateLimitError,
  ServerError,
  NetworkError,
  ClientError,
} from './client';

// Export utilities
export { PaginationHelper, PaginatedIterator, AutoPaginator } from './pagination';
export { RetryHelper, CircuitBreaker, RateLimiter, BatchHelper } from './retry';

// Default export
export { {{entityName}}Client as default } from './client';

// Version information
export const VERSION = '{{version}}';
export const GENERATED_AT = '{{timestamp}}';

// Quick start helper
export function createClient(config: {{entityName}}ClientConfig) {
  return new {{entityName}}Client(config);
}

// Environment-based client creation
export function createClientFromEnv() {
  const baseURL = process.env.{{entityName.toUpperCase()}}_API_URL || process.env.API_BASE_URL;
  const apiKey = process.env.{{entityName.toUpperCase()}}_API_KEY || process.env.API_KEY;

  if (!baseURL) {
    throw new Error('API base URL not found. Set {{entityName.toUpperCase()}}_API_URL or API_BASE_URL environment variable.');
  }

  return new {{entityName}}Client({
    baseURL,
    apiKey,
    timeout: parseInt(process.env.API_TIMEOUT || '30000'),
    retries: parseInt(process.env.API_RETRIES || '3'),
    retryDelay: parseInt(process.env.API_RETRY_DELAY || '1000'),
  });
}
