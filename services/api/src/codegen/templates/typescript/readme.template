# {{entityName}} API SDK

[![npm version](https://badge.fury.io/js/%40ai-api-integrator%2F{{entityName}}-sdk.svg)](https://badge.fury.io/js/%40ai-api-integrator%2F{{entityName}}-sdk)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A TypeScript SDK for the {{entityName}} API, generated by [AI API Integrator](https://github.com/ai-api-integrator).

## Features

- ✅ **TypeScript Support** - Full type safety with auto-generated interfaces
- 🔄 **Automatic Retries** - Built-in retry logic with exponential backoff
- 📄 **Pagination Support** - Helpers for offset and cursor-based pagination
- 🛡️ **Error Handling** - Comprehensive error taxonomy and handling
- ⚡ **Circuit Breaker** - Protection against cascading failures
- 📊 **Rate Limiting** - Built-in rate limiting to respect API limits
- 🔍 **Request Logging** - Detailed request/response logging
- 📦 **Batch Operations** - Efficient batch processing of requests

## Installation

```bash
npm install @ai-api-integrator/{{entityName}}-sdk
```

## Quick Start

### Basic Usage

```typescript
import { {{entityName}}Client } from '@ai-api-integrator/{{entityName}}-sdk';

// Create a client instance
const client = new {{entityName}}Client({
  baseURL: 'https://api.{{entityName}}.com',
  apiKey: 'your-api-key', // optional
});

// Use the client
const items = await client.findAll();
console.log(items);
```

### Environment Configuration

```typescript
import { createClientFromEnv } from '@ai-api-integrator/{{entityName}}-sdk';

// Automatically configure from environment variables
const client = createClientFromEnv();

// Requires these environment variables:
// - {{entityName.toUpperCase()}}_API_URL or API_BASE_URL
// - {{entityName.toUpperCase()}}_API_KEY or API_KEY (optional)
```

## Configuration

```typescript
const client = new {{entityName}}Client({
  baseURL: 'https://api.{{entityName}}.com',
  apiKey: 'your-api-key',
  timeout: 30000,        // Request timeout in milliseconds
  retries: 3,           // Maximum number of retries
  retryDelay: 1000,     // Base delay between retries in milliseconds
});
```

## API Methods

### List {{entityName}}s

```typescript
// Simple pagination
const response = await client.findAll();
console.log(response.data);
console.log(response.pagination);

// With custom options
const response = await client.findAll({
  page: 2,
  limit: 50,
});
```

### Get Single {{entityName}}

```typescript
const item = await client.findOne('item-id');
console.log(item);
```

### Create {{entityName}}

```typescript
const newItem = await client.create({
  name: 'New Item',
  description: 'Description of the new item',
});
```

### Update {{entityName}}

```typescript
const updatedItem = await client.update('item-id', {
  name: 'Updated Name',
  description: 'Updated description',
});
```

### Delete {{entityName}}

```typescript
await client.delete('item-id');
```

## Pagination

The SDK provides several pagination utilities:

### Iterator Pattern

```typescript
import { PaginatedIterator } from '@ai-api-integrator/{{entityName}}-sdk';

const iterator = new PaginatedIterator(client.findAll.bind(client));

for await (const page of iterator.all()) {
  console.log('Page:', page);
}
```

### Auto-Pagination

```typescript
import { AutoPaginator } from '@ai-api-integrator/{{entityName}}-sdk';

const paginator = new AutoPaginator(client.findAll.bind(client));
const allItems = await paginator.all();
console.log('All items:', allItems);
```

### Manual Pagination

```typescript
import { PaginationHelper } from '@ai-api-integrator/{{entityName}}-sdk';

// Offset-based pagination
const options = PaginationHelper.createOffsetPagination(1, 20);
const response = await client.findAll(options);

// Cursor-based pagination
const cursorOptions = PaginationHelper.createCursorPagination('cursor-token', 20);
const cursorResponse = await client.findAll(cursorOptions);
```

## Error Handling

The SDK provides specific error types for different scenarios:

```typescript
import {
  ApiError,
  ValidationError,
  AuthenticationError,
  AuthorizationError,
  NotFoundError,
  RateLimitError,
  NetworkError,
} from '@ai-api-integrator/{{entityName}}-sdk';

try {
  const result = await client.findOne('invalid-id');
} catch (error) {
  if (error instanceof NotFoundError) {
    console.log('Item not found');
  } else if (error instanceof AuthenticationError) {
    console.log('Authentication required');
  } else if (error instanceof RateLimitError) {
    console.log('Rate limit exceeded, retry later');
  } else {
    console.error('Unexpected error:', error);
  }
}
```

## Retry & Circuit Breaker

### Custom Retry Configuration

```typescript
import { RetryHelper } from '@ai-api-integrator/{{entityName}}-sdk';

const result = await RetryHelper.withRetry(
  () => client.findAll(),
  {
    maxRetries: 5,
    baseDelay: 1000,
    retryCondition: (error, attempt) => {
      // Custom retry logic
      return error instanceof NetworkError && attempt < 3;
    },
    onRetry: (error, attempt) => {
      console.log(`Retry attempt ${attempt} for error:`, error.message);
    },
  }
);
```

### Circuit Breaker

```typescript
import { CircuitBreaker } from '@ai-api-integrator/{{entityName}}-sdk';

const breaker = new CircuitBreaker(5, 60000); // 5 failures, 1 minute recovery

try {
  const result = await breaker.execute(() => client.findAll());
} catch (error) {
  if (error.message === 'Circuit breaker is OPEN') {
    console.log('Service is currently unavailable');
  }
}
```

## Rate Limiting

```typescript
import { RateLimiter } from '@ai-api-integrator/{{entityName}}-sdk';

const limiter = new RateLimiter(100, 60000); // 100 requests per minute

// Wait for available slot
await limiter.waitForSlot();
const result = await client.findAll();

console.log('Remaining requests:', limiter.getRemainingRequests());
```

## Batch Operations

```typescript
import { BatchHelper } from '@ai-api-integrator/{{entityName}}-sdk';

// Process items in batches
const itemIds = ['id1', 'id2', 'id3', 'id4', 'id5'];
const results = await BatchHelper.batchProcess(
  itemIds,
  async (id) => await client.findOne(id),
  {
    batchSize: 2,
    concurrency: 3,
    onProgress: (completed, total) => {
      console.log(`Processed ${completed}/${total} items`);
    },
  }
);
```

## TypeScript Support

The SDK is fully typed and provides excellent IntelliSense support:

```typescript
import type {
  {{entityName}},
  Create{{entityName}}Request,
  Update{{entityName}}Request,
  {{entityName}}ListResponse,
} from '@ai-api-integrator/{{entityName}}-sdk';

// All types are automatically inferred
const item: {{entityName}} = await client.findOne('id');

// Type-safe request objects
const createRequest: Create{{entityName}}Request = {
  name: 'New Item',
  description: 'Description',
};
```

## Contributing

This SDK is auto-generated by AI API Integrator. For issues or feature requests:

1. [Open an issue](https://github.com/ai-api-integrator/{{entityName}}-sdk/issues)
2. Contact the API provider for API-related issues

## License

MIT © [AI API Integrator](https://github.com/ai-api-integrator)

---

**Generated by [AI API Integrator](https://github.com/ai-api-integrator) on {{timestamp}}**
