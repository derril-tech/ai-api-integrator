import { Controller, Get, Post, Body, Param, UseInterceptors, UseFilters, UseGuards } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { LoggingInterceptor } from '../interceptors/logging.interceptor';
import { TracingInterceptor } from '../interceptors/tracing.interceptor';
import { HttpExceptionFilter } from '../filters/http-exception.filter';
import { AuthGuard } from '../guards/auth.guard';
import { {{serviceName}}Service } from '../services/{{serviceName}}.service';
import { Create{{entityName}}Dto } from '../dtos/create-{{entityName}}.dto';

@ApiTags('{{entityName}}')
@Controller('{{entityName}}')
@UseInterceptors(LoggingInterceptor, TracingInterceptor)
@UseFilters(HttpExceptionFilter)
@UseGuards(AuthGuard)
export class {{entityName}}Controller {
  constructor(private readonly {{serviceName}}Service: {{serviceName}}Service) {}

  @Get()
  @ApiOperation({ summary: 'Get all {{entityName}} items' })
  @ApiResponse({ status: 200, description: 'List of {{entityName}} items' })
  async findAll() {
    return this.{{serviceName}}Service.findAll();
  }

  @Post()
  @ApiOperation({ summary: 'Create {{entityName}} item' })
  @ApiResponse({ status: 201, description: '{{entityName}} item created' })
  async create(@Body() createDto: Create{{entityName}}Dto) {
    return this.{{serviceName}}Service.create(createDto);
  }

  @Get(':id')
  @ApiOperation({ summary: 'Get {{entityName}} item by ID' })
  @ApiResponse({ status: 200, description: '{{entityName}} item found' })
  async findOne(@Param('id') id: string) {
    return this.{{serviceName}}Service.findOne(id);
  }
}
