import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { LoggerService } from '../services/logger.service';

@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  constructor(private readonly logger: LoggerService) {}

  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const request = context.switchToHttp().getRequest();
    const { method, url, body, params, query } = request;
    const userAgent = request.get('User-Agent') || '';
    const now = Date.now();

    this.logger.log(
      \`Incoming Request: \${method} \${url}\`,
      'LoggingInterceptor',
      { method, url, body, params, query, userAgent }
    );

    return next.handle().pipe(
      tap((data) => {
        const response = context.switchToHttp().getResponse();
        const { statusCode } = response;
        const responseTime = Date.now() - now;

        this.logger.log(
          \`Response: \${method} \${url} \${statusCode} - \${responseTime}ms\`,
          'LoggingInterceptor',
          { statusCode, responseTime, data }
        );
      })
    );
  }
}
